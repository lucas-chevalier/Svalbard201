import React, { useState, useEffect } from "react";
import { ref, update, onValue } from "firebase/database";
import { db } from "../firebase";

const botaniqueData = [
  { nom: "Solanum-PT (Pomme de terre)", eau: "Moyen", energie: "Moyen", type: "Nourrici√®re" },
  { nom: "Lemna-M (Lentille d‚Äôeau)", eau: "√âlev√©", energie: "Faible", type: "Assainissante" },
  { nom: "Helianthus-T (Tournesol)", eau: "Moyen", energie: "√âlev√©", type: "Stabilisatrice" },
  { nom: "Oryza-R (Riz)", eau: "Tr√®s √©lev√©", energie: "√âlev√©", type: "Nourrici√®re" },
  { nom: "Mentha-V (Menthe)", eau: "Faible", energie: "Faible", type: "Assainissante" },
  { nom: "Phaseolus-H (Haricot)", eau: "Moyen", energie: "Faible", type: "Nourrici√®re" },
  { nom: "Solanum-TM (Tomate)", eau: "Moyen", energie: "√âlev√©", type: "Nourrici√®re" },
  { nom: "Phragmites-RS (Roseau)", eau: "√âlev√©", energie: "Faible", type: "Assainissante" },
];

export default function Biosphere({ playerRole, sessionId, onWin, players, playerId, roomName }) {
  const [showVictoryLocal, setShowVictoryLocal] = useState(false);
  const [showContextPopup, setShowContextPopup] = useState(true);
  let infoContent;

  // Synchronisation du statut de victoire pour tous les joueurs
  useEffect(() => {
    if (!sessionId) return;
    const solvedRef = ref(db, `sessions/${sessionId}/biosphere/solved`);
    const unsub = onValue(solvedRef, (snap) => {
      const isSolved = snap.val();
      if (isSolved) {
        setShowVictoryLocal(true);
      }
    });
    return () => unsub();
  }, [sessionId]);

  if (playerRole === "Hydrologue") {
    infoContent = (
      <>
        <h2>Note de service interne ‚Äì D√©partement Hydrique Svalbard 201</h2>
        <p>
          Les premiers √©checs de la biosph√®re 200 provenaient d‚Äôune erreur humaine : trop d‚Äôambition, pas assez d‚Äô√©quilibre.<br/>
          La stabilit√© d‚Äôun √©cosyst√®me artificiel ne se mesure pas √† la productivit√©, mais √† la compl√©mentarit√©.<br/>
          <br/>
          Les archives de la mission indiquent que la diversit√© fonctionnelle est essentielle :<br/>
          <ul>
            <li>une plante qui nourrit,</li>
            <li>une plante qui purifie,</li>
            <li>une plante qui r√©gule.</li>
          </ul>
          L‚Äôeau doit circuler, pas s‚Äô√©vaporer. L‚Äô√©nergie doit alimenter, pas s‚Äô√©puiser.<br/>
          Deux exc√®s identiques provoquent toujours une rupture ‚Äî trop d‚Äôeau ou trop d‚Äô√©nergie, le r√©sultat est le m√™me : d√©s√©quilibre.<br/>
          <br/>
          Observe les propositions du biologiste et rappelle-toi :<br/>
          <ul>
            <li>le froid et le calme favorisent la survie ;</li>
            <li>la diversit√© prot√®ge la stabilit√© ;</li>
            <li>un seul exc√®s peut tout compromettre.</li>
          </ul>
          <br/>
          Signe : Dr E. Halden ‚Äî Ing√©nierie Hydrique, 2089.
        </p>
      </>
    );
  } else if (playerRole === "Biologiste") {
    infoContent = (
      <>
        <h2>Fichier de consultation : R√©serve Botanique ‚Äì Section 201 / Acc√®s Niveau B2</h2>
        <table style={{ width: '100%', background: '#111', color: '#00ff66', fontFamily: 'Consolas, monospace', borderCollapse: 'collapse', marginTop: '1em' }}>
          <thead>
            <tr style={{ background: '#222', color: '#00ffcc' }}>
              <th style={{ padding: '0.5em', borderBottom: '1px solid #00ff66' }}>Nom scientifique (code de sp√©cimen)</th>
              <th style={{ padding: '0.5em', borderBottom: '1px solid #00ff66' }}>Besoin en eau</th>
              <th style={{ padding: '0.5em', borderBottom: '1px solid #00ff66' }}>Besoin √©nerg√©tique</th>
              <th style={{ padding: '0.5em', borderBottom: '1px solid #00ff66' }}>Type √©cologique</th>
            </tr>
          </thead>
          <tbody>
            {botaniqueData.map((plante, idx) => (
              <tr key={idx}>
                <td style={{ padding: '0.5em', borderBottom: '1px solid #222' }}>{plante.nom}</td>
                <td style={{ padding: '0.5em', borderBottom: '1px solid #222' }}>{plante.eau}</td>
                <td style={{ padding: '0.5em', borderBottom: '1px solid #222' }}>{plante.energie}</td>
                <td style={{ padding: '0.5em', borderBottom: '1px solid #222' }}>{plante.type}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </>
    );
  } else if (playerRole === "√ânerg√©ticien") {
    infoContent = (
      <>
        <h2>Terminal d‚Äôalimentation ‚Äì Biosph√®re 201 / Syst√®me de validation des combinaisons</h2>
        <TerminalEnerg√©ticien sessionId={sessionId} onWin={onWin} />
        <div style={{ marginTop: '2em', fontSize: '0.9em', color: '#00ffcc' }}>
          Terminal : SVALBARD_201_MAINFRAME // Secure Node 04
        </div>
      </>
    );
  } else {
    infoContent = <div>R√¥le inconnu.</div>;
  }

  return (
    <div className="biosphere-room" style={{ 
      minHeight: "100vh", 
      position: "relative",
      backgroundImage: "url('/backgrounds/biosphereB.png')",
      backgroundSize: "cover",
      backgroundPosition: "center",
      backgroundRepeat: "no-repeat"
    }}>
      {showVictoryLocal && (
        <div className="victory-overlay" role="dialog" aria-modal="true">
          <div className="victory-card" style={{ textShadow: 'none', filter: 'none' }}>
            <h2 style={{ textShadow: 'none', filter: 'none' }}>üéâ √âcosyst√®me Optimis√© !</h2>
            <p style={{ textShadow: 'none', filter: 'none' }}>Biosph√®re √©quilibr√©e ‚Äî bravo !</p>
            <p style={{ fontSize: '16px', fontStyle: 'italic', color: '#b0b0b0', marginTop: '12px', padding: '8px', backgroundColor: 'rgba(255,255,255,0.05)', borderRadius: '4px', lineHeight: '1.4' }}>
              "Incroyable ! Vous avez cr√©√© un √©cosyst√®me si parfait que m√™me les plantes carnivores sourient. Enfin, on suppose qu'elles sourient."
            </p>
            <div style={{display:'flex', gap:8, marginTop:12}}>
              <button onClick={() => setShowVictoryLocal(false)} className="puzzle-action-btn">Fermer</button>
            </div>
          </div>
        </div>
      )}

      {/* Popup explicatif global pour tous les r√¥les */}
      {showContextPopup && (
        <div className="victory-overlay">
          <div className="victory-card" style={{ maxWidth: '580px', textAlign: 'left', textShadow: 'none', filter: 'none' }}>
            <h2 style={{ color: '#00ff66', marginBottom: '16px', textAlign: 'center', textShadow: 'none', filter: 'none' }}>üå± RAPPORT LOG - BIOSPH√àRE</h2>
            
            <div style={{ marginBottom: '16px', padding: '12px', background: 'rgba(255,165,0,0.2)', borderRadius: '6px', border: '1px solid #ffaa00' }}>
              <strong style={{ color: '#ffcc66' }}>MAINTENANCE REQUISE :</strong> Optimisation des cultures n√©cessaire
            </div>

            <div style={{ lineHeight: '1.5', marginBottom: '20px' }}>
              <p style={{ marginBottom: '12px' }}>
                La production alimentaire de la station doit √™tre optimis√©e. Chaque sp√©cialiste a acc√®s √† des informations sp√©cifiques :
              </p>
              
              <div style={{ marginLeft: '16px', marginBottom: '12px' }}>
                <div style={{ marginBottom: '6px' }}>üíß <strong>Hydrologue</strong> - Conseils sur l'√©quilibre hydrique et √©nerg√©tique</div>
                <div style={{ marginBottom: '6px' }}>üî¨ <strong>Biologiste</strong> - Base de donn√©es des esp√®ces disponibles</div>
                <div style={{ marginBottom: '6px' }}>‚ö° <strong>√ânerg√©ticien</strong> - Terminal de validation des combinaisons</div>
              </div>

              <p style={{ color: '#ffd700', fontWeight: 'bold' }}>
                Collaborez pour composer un √©cosyst√®me viable et √©quilibr√©...
              </p>
            </div>

            <div style={{ textAlign: 'center' }}>
              <button 
                onClick={() => setShowContextPopup(false)}
                style={{
                  background: '#00ff66',
                  color: '#000',
                  border: 'none',
                  padding: '12px 24px',
                  borderRadius: '6px',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  fontSize: '16px'
                }}
              >
                Acc√©der aux donn√©es
              </button>
            </div>
          </div>
        </div>
      )}

      <div style={{
        position: "absolute",
        left: "10%",
        right: "10%",
        bottom: "10%",
        zIndex: 2,
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "flex-end",
        overflowY: "auto",
        color: "#00ff66",
        fontFamily: "Consolas, monospace",
      }}>
        {infoContent}
      </div>
    </div>
  );
}

// === Terminal √ânerg√©ticien ===
function TerminalEnerg√©ticien({ sessionId, onWin }) {
  const [codes, setCodes] = useState([]);
  const [input, setInput] = useState("");
  const [message, setMessage] = useState("");
  const [msgColor, setMsgColor] = useState("#00ff66");
  const [plantsEntered, setPlantsEntered] = useState([]);

  const plants = [
    { code: "11A", type: "A", water: 1, energy: 1, name: "Menthe" },
    { code: "21N", type: "N", water: 2, energy: 1, name: "Haricot" },
    { code: "22N", type: "N", water: 2, energy: 2, name: "Pomme de terre" },
    { code: "23N", type: "N", water: 2, energy: 3, name: "Tomate" },
    { code: "23S", type: "S", water: 2, energy: 3, name: "Tournesol" },
    { code: "31A", type: "A", water: 3, energy: 1, name: "Lentille d‚Äôeau" },
    { code: "32A", type: "A", water: 3, energy: 2, name: "Roseau" },
    { code: "33N", type: "N", water: 3, energy: 3, name: "Riz" },
  ];

  const uniqueTypes = ["N", "A", "S"];
  const max_high_water = 1;
  const max_high_energy = 1;

  const handleAddCode = () => {
    if (codes.length >= 3) return;
    if (!/^([1-3])([1-3])[NAS]$/.test(input)) {
      setMessage("Entr√©e incorrecte.");
      setMsgColor("#ff3333");
      return;
    }
    const plant = plants.find(p => p.code === input);
    if (!plant) {
      setMessage("Plante non trouv√©e.");
      setMsgColor("#ff3333");
      return;
    }
    setCodes([...codes, input]);
    setPlantsEntered([...plantsEntered, plant]);
    setMessage(`Plante enregistr√©e : ${plant.name}`);
    setMsgColor("#00ff66");
    setInput("");
  };

  const handleRemoveLast = () => {
    if (codes.length === 0) return;
    setCodes(codes.slice(0, -1));
    setPlantsEntered(plantsEntered.slice(0, -1));
    setMessage("");
    setMsgColor("#00ff66");
  };

  const validateCombination = () => {
    if (codes.length !== 3) return;

    const types = plantsEntered.map(p => p.type);
    for (let t of uniqueTypes) {
      if (!types.includes(t)) {
        setMessage("Le syst√®me est d√©s√©quilibr√©");
        setMsgColor("#ff3333");
        return;
      }
    }

    const highWater = plantsEntered.filter(p => p.water === 3).length;
    if (highWater > max_high_water) {
      setMessage("Le syst√®me est d√©s√©quilibr√©");
      setMsgColor("#ff3333");
      return;
    }

    const highEnergy = plantsEntered.filter(p => p.energy === 3).length;
    if (highEnergy > max_high_energy) {
      setMessage("Le syst√®me est d√©s√©quilibr√©");
      setMsgColor("#ff3333");
      return;
    }

    setMessage("La biosph√®re est √©quilibr√©e, F√©licitations");
    setMsgColor("#00ff66");

    if (sessionId && onWin) {
      // Marquer comme r√©solu pour tous les joueurs
      update(ref(db, `sessions/${sessionId}/biosphere/solved`), true);
      onWin();
    }
  };

  useEffect(() => {
    if (codes.length === 3) validateCombination();
  }, [codes]);

  return (
    <div style={{ fontFamily: 'Consolas, monospace', background: '#111', border: '2px solid #00ff66', borderRadius: 8, padding: '1.5em', color: '#00ff66', maxWidth: 500, margin: '0 auto' }}>
      <div style={{ marginBottom: '1em' }}>Format attendu : <b>(Eau)(√ânergie)(Type)</b> &nbsp; Exemple : <b>21N</b></div>
      <div style={{ marginBottom: '1em' }}>
        <div>
          Entr√©e du code : <input style={{ width: 60, fontFamily: 'inherit', fontSize: '1em' }} maxLength={3} value={input} onChange={e => setInput(e.target.value.toUpperCase())} disabled={codes.length >= 3} />
          <button style={{ marginLeft: '1em', background: '#00ff66', color: '#111', border: 'none', borderRadius: 4, padding: '0.3em 1em', fontWeight: 'bold', cursor: 'pointer', fontFamily: 'inherit', fontSize: '1em' }} onClick={handleAddCode} disabled={codes.length >= 3}>Valider code</button>
          <button style={{ marginLeft: '1em', background: '#222', color: '#00ff66', border: '1px solid #00ff66', borderRadius: 4, padding: '0.3em 1em', fontWeight: 'bold', cursor: 'pointer', fontFamily: 'inherit', fontSize: '1em' }} onClick={handleRemoveLast} disabled={codes.length === 0}>Supprimer dernier</button>
        </div>
      </div>

      <div style={{ marginBottom: '1em', fontSize: '0.95em' }}>
        <b>Plantes enregistr√©es :</b>
        <ul>
          {plantsEntered.map((p, idx) => <li key={idx}>{p.code} ‚Äì {p.name}</li>)}
        </ul>
      </div>

      <div style={{ marginBottom: '1em', fontSize: '0.95em' }}>
        <b>Param√®tres :</b><br />
        Eau : 1 = faible / 2 = moyen / 3 = √©lev√©<br />
        √ânergie : 1 = faible / 2 = moyen / 3 = √©lev√©<br />
        Type : N = Nourrici√®re / A = Assainissante / S = Stabilisatrice
      </div>

      {codes.length < 3 && <div style={{ marginBottom: '1em', color: '#00ffcc' }}>Entrez trois codes pour valider la combinaison.</div>}
      {message && <div style={{ marginTop: '1.5em', color: msgColor, fontWeight: 'bold', fontSize: '1.1em' }}>{message}</div>}
    </div>
  );
}
